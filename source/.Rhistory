df2$z = df2$ls
df2 = subset(df2, select = -c(dem,slope,flowdir,length,ls))
ls_map = rasterFromXYZ(df2)
if (df[i,5] == 8){df[i,6] = cellsize*1.414}  #NE
plot(ls_map)
#Set working directory, import packages, source functions,
setwd(paste(directory,"/source/", sep = ''))    # set temp working directory
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUnisversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUnisversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Input data
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Input data
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
## Generate LS map
Creat_LS_map(dem_file)
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Generate LS map
Creat_LS_map(dem_file)
LS_map
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Generate LS map
Creat_LS_map(dem_file)
## Import packages
library(raster)
library(sp)
library(rgdal)
## Load DEM data
soil_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/soil_K.tif"
## Read DEM file
k_map = raster(soil_file)
k_map = aggregate(k_map, fact = 10) ## aggregate data (optional)
df_k = as.data.frame(k_map, xy=T)
plot(k_map)
View(df_k)
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
soil_k_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/soil_K.tif"
## Generate K map (Soil erosibility)
Creat_K_map(soil_k_map)
## Import packages
library(raster)
library(sp)
library(rgdal)
## Load DEM data
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif"
## Read DEM file
landuse = raster(landuse_map)
landuse = aggregate(landuse, fact = 10) ## aggregate data (optional)
df_lulc = as.data.frame(k_map, xy=T)
df_lulc = as.data.frame(landuse, xy=T)
plot(landuse)
View(df_lulc)
## Read DEM file
landuse = raster(landuse_map)
## Import packages
library(raster)
library(sp)
library(rgdal)
## Load DEM data
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif"
## Read DEM file
landuse = raster(landuse_map)
landuse = aggregate(landuse, fact = 10, fun=max) ## aggregate data (optional)
)
df_lulc = as.data.frame(landuse, xy=T)
View(df_lulc)
## managing Nodata
df_lulc$landuse[is.nan(df_lulc$landuse)] = -9999 #change NaN to -9999
df_lulc$landuse[is.na(df_lulc$landuse)] = -9999 #change Na to -9999
## estimate c value
df_lulc$cfactor = 0
## estimate c value
df_lulc$cfactor = 0
for(i in 1:nrow(df_lulc)){
if (df[i,3] == -9999){
df[i,4] = 0
} else {
if (df[i,3] == 11){df[i,4] = 0}  # water
if (df[i,5] == 21){df[i,4] = 0.2}   # urban
if (df[i,5] == 22){df[i,4] = 0.2}   # urban
if (df[i,5] == 23){df[i,4] = 0.2}   # urban
if (df[i,5] == 24){df[i,4] = 0.2}   # urban
if (df[i,5] == 31){df[i,4] = 1.0}   # barren land
if (df[i,5] == 41){df[i,4] = 0.01}   # forest
if (df[i,5] == 42){df[i,4] = 0.01}   # forest
if (df[i,5] == 43){df[i,4] = 0.01}   # forest
if (df[i,5] == 52){df[i,4] = 0.1}   # shrub/scurb
if (df[i,5] == 71){df[i,4] = 0.16}   # Herbaceuous
if (df[i,5] == 81){df[i,4] = 0.1}   # Pasture
if (df[i,5] == 82){df[i,4] = 0.5}   # crop
if (df[i,5] == 90){df[i,4] = 0.01}   # wetland
if (df[i,5] == 95){df[i,4] = 0.01}   # wetland
}
}
df_lulc = as.data.frame(landuse, xy=T)
## managing Nodata
df_lulc$landuse[is.nan(df_lulc$landuse)] = -9999 #change NaN to -9999
df_lulc$landuse[is.na(df_lulc$landuse)] = -9999 #change Na to -9999
## estimate c value
df_lulc$cfactor = 0
for(i in 1:nrow(df_lulc)){
if (df[i,3] == -9999){
df[i,4] = 0
} else {
if (df[i,3] == 11){df[i,4] = 0}  # water
if (df[i,3] == 21){df[i,4] = 0.2}   # urban
if (df[i,3] == 22){df[i,4] = 0.2}   # urban
if (df[i,3] == 23){df[i,4] = 0.2}   # urban
if (df[i,3] == 24){df[i,4] = 0.2}   # urban
if (df[i,3] == 31){df[i,4] = 1.0}   # barren land
if (df[i,3] == 41){df[i,4] = 0.01}   # forest
if (df[i,3] == 42){df[i,4] = 0.01}   # forest
if (df[i,3] == 43){df[i,4] = 0.01}   # forest
if (df[i,3] == 52){df[i,4] = 0.1}   # shrub/scurb
if (df[i,3] == 71){df[i,4] = 0.16}   # Herbaceuous
if (df[i,3] == 81){df[i,4] = 0.1}   # Pasture
if (df[i,3] == 82){df[i,4] = 0.5}   # crop
if (df[i,3] == 90){df[i,4] = 0.01}   # wetland
if (df[i,3] == 95){df[i,4] = 0.01}   # wetland
}
}
df_lulc = as.data.frame(landuse, xy=T)
## managing Nodata
df_lulc$landuse[is.nan(df_lulc$landuse)] = -9999 #change NaN to -9999
df_lulc$landuse[is.na(df_lulc$landuse)] = -9999 #change Na to -9999
## estimate c value
df_lulc$cfactor = 0
for(i in 1:nrow(df_lulc)){
if (df_lulc[i,3] == -9999){
df_lulc[i,4] = 0
} else {
if (df_lulc[i,3] == 11){df_lulc[i,4] = 0}  # water
if (df_lulc[i,3] == 21){df_lulc[i,4] = 0.2}   # urban
if (df_lulc[i,3] == 22){df_lulc[i,4] = 0.2}   # urban
if (df_lulc[i,3] == 23){df_lulc[i,4] = 0.2}   # urban
if (df_lulc[i,3] == 24){df_lulc[i,4] = 0.2}   # urban
if (df_lulc[i,3] == 31){df_lulc[i,4] = 1.0}   # barren land
if (df_lulc[i,3] == 41){df_lulc[i,4] = 0.01}   # forest
if (df_lulc[i,3] == 42){df_lulc[i,4] = 0.01}   # forest
if (df_lulc[i,3] == 43){df_lulc[i,4] = 0.01}   # forest
if (df_lulc[i,3] == 52){df_lulc[i,4] = 0.1}   # shrub/scurb
if (df_lulc[i,3] == 71){df_lulc[i,4] = 0.16}   # Herbaceuous
if (df_lulc[i,3] == 81){df_lulc[i,4] = 0.1}   # Pasture
if (df_lulc[i,3] == 82){df_lulc[i,4] = 0.5}   # crop
if (df_lulc[i,3] == 90){df_lulc[i,4] = 0.01}   # wetland
if (df_lulc[i,3] == 95){df_lulc[i,4] = 0.01}   # wetland
}
}
#Create C raster data
df_lulc2 = df_lulc
View(df_lulc2)
df_lulc2$z = df_lulc2$cfactor
df_lulc2 = subset(df_lulc2, select = -c(cfactor))
df_lulc2 = subset(df_lulc2, select = -c(landuse,cfactor))
#Create C raster data
df_lulc2 = df_lulc
df_lulc2$z = df_lulc2$cfactor
df_lulc2 = subset(df_lulc2, select = -c(landuse,cfactor))
ls_map = rasterFromXYZ(df2)
c_map = rasterFromXYZ(df_lulc2)
plot(c_map)
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif.tif"
## Generate C map (Soil erosibility)
Creat_C_map(landuse_map)
## Step#2: Define parameters
nfarmers <- 10 # number of farmers
## Step#3. Initialize Farmer agents' index.
farmers <- FarmersInit(nfarmers)
View(farmers)
View(farmers)
View(FarmersInit)
## Import packages
library(raster)
library(sp)
library(rgdal)
## Load DEM data
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif"
## Read DEM file
landuse = raster(landuse_map)
landuse = aggregate(landuse, fact = 10, fun=max) ## aggregate data (optional)
df_lulc = as.data.frame(landuse, xy=T)
View(df_lulc)
## managing Nodata
df_lulc$landuse[is.nan(df_lulc$landuse)] = -9999 #change NaN to -9999
df_lulc$landuse[is.na(df_lulc$landuse)] = -9999 #change Na to -9999
## Load input
nfarmers = 10
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif"
## Read DEM file
landuse = raster(landuse_map)
landuse = aggregate(landuse, fact = 10, fun=max) ## aggregate data (optional)
df_lulc = as.data.frame(landuse, xy=T)
## managing Nodata
df_lulc$landuse[is.nan(df_lulc$landuse)] = -9999 #change NaN to -9999
df_lulc$landuse[is.na(df_lulc$landuse)] = -9999 #change Na to -9999
View(df_lulc)
## distribute farmers into crop land type
df_lulc$fowner = 0
for(i in 1:nrow(df_lulc)){
if (df_lulc[i,3] == -9999){
df_lulc[i,4] = 0
} else if(df_lulc[i,3]==82){
df_lulc[i,4] = sample(1:nfarmers,1)
} else{df_lulc[i,4]=1}
## Generate LS map
Creat_LS_map(dem_file)
## Programed by Dongjun Lee for predicting amount of soil loss
## Import packages
library(raster)
library(sp)
library(rgdal)
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#2: Define parameters
nfarmers <- 10 # number of farmers
## Input data
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
soil_k_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/soil_K.tif"
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif.tif"
hsg_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/hsg.tif"
rainfall_file = 'D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/rainfall_monthly.csv'
## Generate LS map
Creat_LS_map(dem_file)
## Generate LS map
Creat_LS_map(dem_file)
library(raster)
library(sp)
library(rgdal)
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
## calculate
dem_file = raster(dem_file)
df_dem = as.data.frame(dem_file, xy=T)
## calculate
dem_file = raster(dem_file)
dem_file = aggregate(dem_file, fact = 10, fun=max) ## aggregate data (optional)
df_dem = as.data.frame(dem_file, xy=T)
## calculate slope
slp = terrain(dem_file, opt = "slope", unit = "tangent")
## calculate slope
slp = terrain(dem_file, opt = "slope", unit = "tangent")
slp = terrain(dem_file, opt = "slope", unit = "tangent")
ttf_slp = as.data.frame(slp, xy=T)
## calculate flow direction
flwdir = terrain(dem_file, opt = "flowdir")
## calculate slope
slp = terrain(dem_file, opt = "slope", unit = "tangent")
ttf_slp = as.data.frame(slp, xy=T)
View(dem_file)
## calculate slope
slp = terrain(dem_file, opt = "slope", unit = "tangent")
terrain(dem_file, opt = "slope", unit = "tangent")
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
## calculate
dem_file = raster(dem_file)
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
## calculate
dem = raster(dem_file)
dem = aggregate(dem_file, fact = 10, fun=max) ## aggregate data (optional)
df_dem = as.data.frame(dem_file, xy=T)
## calculate slope
slp = terrain(dem, opt = "slope", unit = "tangent")
df_slp = as.data.frame(slp, xy=T)
## calculate flow direction
flwdir = terrain(dem, opt = "flowdir")
plot(flwdir)
df_flwdir = as.data.frame(flwdir, xy=T)
## Database combined
df = cbind(df_dem, df_slp["slope"]*100) #covert tangent to percent (slope)
df = cbind(df, df_flwdir["flowdir"])
## managing Nodata
df$slope[is.nan(df$slope)] = -9999 #change NaN to -9999
df$slope[is.na(df$slope)] = -9999 #change Na to -9999
df$flowdir[is.nan(df$flowdir)] = -9999 #change NaN to -9999
df$flowdir[is.na(df$flowdir)] = -9999 #change Na to -9999
## managing Nodata
df$slope[is.nan(df$slope)] = -9999 #change NaN to -9999
df$slope[is.na(df$slope)] = -9999 #change Na to -9999
df$flowdir[is.nan(df$flowdir)] = -9999 #change NaN to -9999
df$flowdir[is.na(df$flowdir)] = -9999 #change Na to -9999
#cell size = 30m
cellsize = 30
# N = 64; NE = 128; E = 1; SE = 2; S = 4; SW = 8; W = 16; NW = 32
df$length = 0
for( i in 1:nrow(df)){
if (df[i,5] == -9999){
df[i,6] = 0
} else {
if (df[i,5] == 64){df[i,6] = cellsize}  # North
if (df[i,5] == 1){df[i,6] = cellsize}   # East
if (df[i,5] == 4){df[i,6] = cellsize}   # South
if (df[i,5] == 16){df[i,6] = cellsize}  # West
if (df[i,5] == 128){df[i,6] = cellsize*1.414}  #NE
if (df[i,5] == 2){df[i,6] = cellsize*1.414}  #NE
if (df[i,5] == 8){df[i,6] = cellsize*1.414}  #NE
if (df[i,5] == 32){df[i,6] = cellsize*1.414}  #NE
}
}
#LS factor
df$ls = 0
for (i in 1:nrow(df)){
if (df[i,5] == -9999){
df[i,7] = 0
} else {
df[i,7]=(0.065+0.0456*df[i,4]+0.006541*(df[i,4]**2)*(df[i,6]/22.1)**0.5)
}
}
#Create LS raster data
df2 = df
df2$z = df2$ls
df2 = subset(df2, select = -c(dem,slope,flowdir,length,ls))
ls_map = rasterFromXYZ(df2)
return(df2)
plot(ls_map)
plot(ls_map)
df_ls = subset(df2, select = -c(dem,slope,flowdir,length,ls))
#Create LS raster data
df2 = df
df2$z = df2$ls
df_ls = subset(df2, select = -c(dem,slope,flowdir,length,ls))
View(df2)
## calculate
dem = raster(dem_file)
dem = aggregate(dem_file, fact = 10, fun=max) ## aggregate data (optional)
df_dem = as.data.frame(dem, xy=T)
## calculate slope
slp = terrain(dem, opt = "slope", unit = "tangent")
df_slp = as.data.frame(slp, xy=T)
## calculate flow direction
flwdir = terrain(dem, opt = "flowdir")
#lot(flwdir)
df_flwdir = as.data.frame(flwdir, xy=T)
## Database combined
df = cbind(df_dem, df_slp["slope"]*100) #covert tangent to percent (slope)
df = cbind(df, df_flwdir["flowdir"])
## managing Nodata
df$slope[is.nan(df$slope)] = -9999 #change NaN to -9999
df$slope[is.na(df$slope)] = -9999 #change Na to -9999
df$flowdir[is.nan(df$flowdir)] = -9999 #change NaN to -9999
df$flowdir[is.na(df$flowdir)] = -9999 #change Na to -9999
#cell size = 30m
cellsize = 30
# N = 64; NE = 128; E = 1; SE = 2; S = 4; SW = 8; W = 16; NW = 32
df$length = 0
for( i in 1:nrow(df)){
if (df[i,5] == -9999){
df[i,6] = 0
} else {
if (df[i,5] == 64){df[i,6] = cellsize}  # North
if (df[i,5] == 1){df[i,6] = cellsize}   # East
if (df[i,5] == 4){df[i,6] = cellsize}   # South
if (df[i,5] == 16){df[i,6] = cellsize}  # West
if (df[i,5] == 128){df[i,6] = cellsize*1.414}  #NE
if (df[i,5] == 2){df[i,6] = cellsize*1.414}  #NE
if (df[i,5] == 8){df[i,6] = cellsize*1.414}  #NE
if (df[i,5] == 32){df[i,6] = cellsize*1.414}  #NE
}
}
#LS factor
df$ls = 0
for (i in 1:nrow(df)){
if (df[i,5] == -9999){
df[i,7] = 0
} else {
df[i,7]=(0.065+0.0456*df[i,4]+0.006541*(df[i,4]**2)*(df[i,6]/22.1)**0.5)
}
}
#Create LS raster data
df2 = df
df2$z = df2$ls
df_ls = subset(df2, select = -c(dem,slope,flowdir,length,ls))
ls_map = rasterFromXYZ(df2)
plot(ls_map)
return(df_ls)
## Programed by Dongjun Lee for predicting amount of soil loss
## Import packages
library(raster)
library(sp)
library(rgdal)
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#2: Define parameters
nfarmers <- 10 # number of farmers
## Input data
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
soil_k_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/soil_K.tif"
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif.tif"
hsg_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/hsg.tif"
## Generate LS map
Creat_LS_map(dem_file)
## Generate LS map
Creat_LS_map(dem_file)
## Import packages
library(raster)
library(sp)
library(rgdal)
## calculate
dem = raster(dem_file)
dem = aggregate(dem_file, fact = 10, fun=max) ## aggregate data (optional)
dem = aggregate(dem, fact = 10, fun=max) ## aggregate data (optional)
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#2: Define parameters
nfarmers <- 10 # number of farmers
## Input data
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
soil_k_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/soil_K.tif"
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif.tif"
hsg_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/hsg.tif"
rainfall_file = 'D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/rainfall_monthly.csv'
## Generate Runoff map
Creat_runoff_map(landuse_map,hsg_map,rainfall_file)
## Generate LS map
Creat_LS_map(dem_file)
## Generate Runoff map
Creat_runoff_map(landuse_map,hsg_map,rainfall_file)
## Generate K map (Soil erosibility)
Creat_K_map(soil_k_map)
## Generate C map
Creat_C_map(landuse_map)
## Step#1: Set up functions and work space
setwd("D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/")
directory <- getwd()
outdir <- paste(directory,"/Output/", sep="")
source(paste(directory, "/Source/FunctionSourcer.R", sep=""))
## Step#2: Define parameters
nfarmers <- 10 # number of farmers
## Input data
dem_file = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/dem.tif"
soil_k_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/soil_K.tif"
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif.tif"
hsg_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/hsg.tif"
rainfall_file = 'D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/rainfall_monthly.csv'
## Generate LS map
Creat_LS_map(dem_file)
## Generate K map (Soil erosibility)
Creat_K_map(soil_k_map)
## Generate P map (based on farmer characteristics)
FarmersInit_P_map(nfarmers, landuse_map)
## Generate C map
Creat_C_map(landuse_map)
## Import packages
library(raster)
library(sp)
library(rgdal)
## Read DEM file
landuse = raster(landuse_map)
## Load DEM data
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif"
## Read DEM file
landuse = raster(landuse_map)
landuse_map = "D:/00_AuburnUniversity/03_Fall,2021/03_Developing_Agent-Based_Models(WILD-7400)/05_ComplexModel/Input/landuse.tif"
## Generate C map
Creat_C_map(landuse_map)
## Generate Runoff map
Creat_runoff_map(landuse_map,hsg_map,rainfall_file)
